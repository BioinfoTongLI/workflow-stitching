#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2020 Tong LI <tongli.bioinfo@protonmail.com>
#
# Distributed under terms of the BSD-3 license.

"""
Merge xlsx log and metadata extracted from stitched image path.
"""
import OMERO_preprocess
import pandas as pd
import argparse
import logging
import shutil
import os
from tqdm import tqdm
from datetime import datetime
logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)


def main(args):
    proj_code = args.proj_code

    PE_log = OMERO_preprocess.preprocess_log(args.xlsx.name)
    logging.info("Project %s has in total %s measurements" %(proj_code, PE_log.shape[0]))

    logging.info(args.stitched_root)
    renamed, failed, unrenamed = \
            OMERO_preprocess.extract_info_from_path(args.stitched_root, proj_code)

    logging.info(
            "Total counts\nRenamed: %s\nStitching failed: %s\nNot renamed: %s"
            %(len(renamed), len(failed), len(unrenamed)))

    matched_and_unrenamed, no_match_and_unrenamed = OMERO_preprocess.find_matches_in_PE_and_log(all_unrenamed, PE_log)
    logging.info(len(no_match_and_unrenamed))
    if matched_and_unrenamed.shape[0] > 0:
        # Some measurements are not renamed and could be renamed, do it.
        matched_and_unrenamed = OMERO_preprocess.generate_columns_for_OMERO(matched_and_unrenamed)

        # This is the tmp modification, maybe changed
        matched_and_unrenamed.OMERO_project = matched_and_unrenamed.Tissue_1

        df_for_import = OMERO_preprocess.generate_tsv_for_import(
                matched_and_unrenamed.copy()
            )
        import_name = "%s_import_%s.tsv"\
            %(proj_code, datetime.today().strftime('%Y%m%d%H%M'))

        df_for_import.to_csv(import_name, sep="\t", index=False)

        # logging.info(matched_and_unrenamed[['tif_path', 'new_tif_path']])

        if args.rename:
            rename_subset = matched_and_unrenamed[['tif_path', 'new_tif_path']]
            for i in tqdm(rename_subset.index, "Renaming..."):
                shutil.move(rename_subset.loc[i].tif_path,
                        rename_subset.loc[i].new_tif_path)
    else:
        logging.info('All images reanmed')


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("-xlsx", required=True, type=argparse.FileType('r'),
            help="The excel log manually generated by experimenters")
    parser.add_argument("-stitched_root", required=True, type=str,
            help="Directory where the stitched images are stored")
    parser.add_argument("-proj_code", required=False, type=str)
    # parser.add_argument("-rename",
            # action='store_false', help="Rename the tif files")
    parser.add_argument('--rename', dest='rename', action='store_true')
    parser.add_argument('--not_rename', dest='rename', action='store_false')
    parser.set_defaults(feature=False)

    args = parser.parse_args()

    main(args)
